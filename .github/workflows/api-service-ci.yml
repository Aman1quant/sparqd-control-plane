# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# *  Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.

name: api-service-ci

on:
  workflow_dispatch:
  push:
    branches:
      - staging
    paths:
      - "api-service/**"
      - ".github/workflows/api-service-ci.yml"
  pull_request:
    branches:
      - staging
    paths:
      - "api-service/**"
      - ".github/workflows/api-service-ci.yml"

env:
  AWS_REGION: ap-southeast-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: sparqd/control-plane-api    # set this to your Amazon ECR repository name
  ARGO_REPO: sparqd/sparqd-control-plane-argocd

permissions:
  contents: read

jobs:
  test-and-build:
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: api-service

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Enable pnpm via corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install

      # - name: Run tests
      #   run: pnpm test

  publish-to-ecr:
    if:  github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    environment: ${{ github.ref_name }}
    needs: test-and-build
    runs-on: ubuntu-latest

    permissions:
      id-token: write     # Required for OIDC
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::677276083343:role/sparqd-github-actions-role
          aws-region: ap-southeast-1

      - name: Extract metadata
        id: meta
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Set image URIs
        run: |
          echo "RUNTIME_IMAGE=${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.SHORT_SHA }}-runtime" >> $GITHUB_OUTPUT
          echo "BUILDER_IMAGE=${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.SHORT_SHA }}-builder" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push runtime image
        run: |
          RUNTIME_IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ steps.meta.outputs.RUNTIME_IMAGE }}
          docker build -t ${{ steps.meta.outputs.RUNTIME_IMAGE }} ./api-service --target runner
          docker push ${{ steps.meta.outputs.RUNTIME_IMAGE }}

      - name: Build and push builder image
        run: |
          BUILDER_IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ steps.meta.outputs.BUILDER_IMAGE }}
          docker build -t ${{ steps.meta.outputs.BUILDER_IMAGE_URI }} ./api-service --target builder-prisma
          docker push ${{ steps.meta.outputs.BUILDER_IMAGE_URI }}

      # - name: Build Docker image
      #   run: |
      #     IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.SHORT_SHA }}
      #     docker build -t $IMAGE_URI ./api-service

      # - name: Push Docker image to ECR
      #   run: |
      #     IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.SHORT_SHA }}
      #     docker push $IMAGE_URI

  update-argocd-image-tag:
    if:  github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    environment: ${{ github.ref_name }}
    needs: publish-to-ecr
    runs-on: ubuntu-latest

    permissions:
      id-token: write     # Required for OIDC
      contents: write

    steps:
      - name: Extract metadata
        id: meta
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          echo "Running job using environment = ${{ github.ref_name }}"

      # - name: Generate a token
      #   id: generate-token
      #   uses: actions/create-github-app-token@v2
      #   with:
      #     app-id: ${{ vars.APP_ID }}
      #     private-key: ${{ secrets.APP_PRIVATE_KEY }}
      #     owner: sparqd
      #     repositories: sparqd-control-plane-argocd 

      # - name: Clone Argo repo
      #   uses: actions/checkout@v4
      #   with:
      #     repository: ${{ env.ARGO_REPO }}
      #     token: ${{ steps.generate-token.outputs.token }}
      #     ref: ${{ github.ref_name }}
      #     path: sparqd-control-plane-argocd

      # - name: Update values.yaml in Repo 2
      #   run: |
      #     cd sparqd-control-plane-argocd
      #     sed -i "s|tag:.*|tag: ${{ steps.meta.outputs.SHORT_SHA }}|" deployments/platform/control-plane-api/values.yaml

      # - name: Commit and push to staging branch
      #   env:
      #     GH_TOKEN: ${{ steps.generate-token.outputs.token }}
      #   run: |
      #     cd sparqd-control-plane-argocd
      #     git config user.name "github-actions"
      #     git config user.email "github-actions@github.com"
      #     git add deployments/platform/control-plane-api/values.yaml
      #     git commit -m "chore: update image tag to ${{ steps.meta.outputs.SHORT_SHA }}"
      #     git push origin ${{ github.ref_name }}
