# -------------------------------------------------------
# CD Workflow
# - Runs only when code is merged into main
# - Purpose: build & push Docker images, update ArgoCD staging
# - Safe: does not run on PRs or feature branches
# -------------------------------------------------------
name: control-plane-cd

on:
  workflow_dispatch:

  push:
    branches:
      - main
    paths:
      - "control-plane/**"
      - ".github/workflows/control-plane-cd.yml"

env:
  AWS_REGION: ap-southeast-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: sparqd/control-plane-api    # set this to your Amazon ECR repository name
  ARGO_REPO: sparqd/sparqd-control-plane-argocd

permissions:
  contents: read

jobs:
  publish-to-ecr:
    environment: staging
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: control-plane

    permissions:
      id-token: write     # Required for OIDC
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::677276083343:role/sparqd-github-actions-role
          aws-region: ap-southeast-1

      - name: Extract metadata
        id: meta
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push runtime image
        run: |
          RUNTIME_IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}-runtime:${{ steps.meta.outputs.SHORT_SHA }}
          docker build -t $RUNTIME_IMAGE_URI . --target runner
          docker push $RUNTIME_IMAGE_URI

      - name: Build and push builder image
        run: |
          BUILDER_IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}-builder:${{ steps.meta.outputs.SHORT_SHA }}
          docker build -t $BUILDER_IMAGE_URI . --target builder-prisma
          docker push $BUILDER_IMAGE_URI

  update-argocd-image-tag-staging:
    environment: staging
    needs: publish-to-ecr
    runs-on: ubuntu-latest

    permissions:
      id-token: write     # Required for OIDC
      contents: write

    steps:
      - name: Extract metadata
        id: meta
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          echo "Running job using environment = staging"

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: sparqd
          repositories: sparqd-control-plane-argocd

      - name: Clone Argo repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ARGO_REPO }}
          token: ${{ steps.generate-token.outputs.token }}
          ref: staging
          path: sparqd-control-plane-argocd

      - name: Update values.yaml in ArgoCD Repo
        run: |
          cd sparqd-control-plane-argocd
          sed -i "s|tag:.*|tag: \"${{ steps.meta.outputs.SHORT_SHA }}\"|" deployments/platform/control-plane/values-api.yaml

      - name: Commit and push to staging branch
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          cd sparqd-control-plane-argocd
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add deployments/platform/control-plane/values-api.yaml
          git commit -m "chore: update image tag to ${{ steps.meta.outputs.SHORT_SHA }}"
          git push origin staging
