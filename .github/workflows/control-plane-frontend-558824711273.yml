# -------------------------------------------------------
# CI Workflow
# - Runs on feature branches (feat/**, fix/**, etc.)
# - Runs on PRs into main
# - Purpose: run tests, lint, build checks
# - Does NOT deploy or push Docker images
# CD Workflow
# - Runs only when code is merged into main
# - Purpose: build & push Docker images, update ArgoCD staging
# - Safe: does not run on PRs or feature branches
# -------------------------------------------------------
name: control-plane-frontend-558824711273

on:
  workflow_dispatch:

  push:
    branches:
      - main
      - feat/**
      - fix/**
      - chore/**
      - refactor/**
      - docs/**
      - test/**
      - ci/**
      - perf/**
      - release/**
      - hotfix/**
    paths:
      - "control-plane-frontend/**"
      - ".github/workflows/control-plane-frontend-558824711273.yml"

  pull_request:
    branches:
      - main
    paths:
      - "control-plane-frontend/**"

env:
  AWS_REGION: ap-southeast-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: sparqd/control-plane-frontend # set this to your Amazon ECR repository name
  ARGO_REPO_URI: sparqd/sparqd-gitops-master
  ARGO_REPO_PATH: core-platform-argocd
  ARGO_REPO_TARGET_REVISION: core-platform/0.0.1

permissions:
  contents: read

jobs:
  test-and-build:
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: control-plane-frontend

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Run npm install
        run: npm install

      - name: Run build
        run: npm run build
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL }}
          VITE_AIRFLOW_URL: ${{ vars.VITE_AIRFLOW_URL }}
          VITE_CONTROL_PLANE_API_BASE_URL: ${{ vars.VITE_CONTROL_PLANE_API_BASE_URL }}
          VITE_CONTROL_PLANE_API_BASE_URL_ONBOARDING: ${{ vars.VITE_CONTROL_PLANE_API_BASE_URL_ONBOARDING }}
          VITE_NEW_API: ${{ vars.VITE_NEW_API }}
          VITE_KEYCLOAK_URL: ${{ vars.VITE_KEYCLOAK_URL }}
          VITE_KEYCLOAK_REALM: ${{ vars.VITE_KEYCLOAK_REALM }}
          VITE_KEYCLOAK_CLIENT_ID: ${{ vars.VITE_KEYCLOAK_CLIENT_ID }}
          VITE_KEYCLOAK_CLIENT_SECRET: ${{ secrets.VITE_KEYCLOAK_CLIENT_SECRET }}
          VITE_AUTH_USERNAME: ${{ vars.VITE_AUTH_USERNAME }}
          VITE_AUTH_PASSWORD: ${{ vars.VITE_AUTH_PASSWORD }}
          VITE_SUPERSET_URL: ${{ vars.VITE_SUPERSET_URL }}
          VITE_SUPERSET_NODE_URL: ${{ vars.VITE_SUPERSET_NODE_URL }}
          VITE_JUPYTER_API_URL: ${{ vars.VITE_JUPYTER_API_URL }}
          VITE_SUPERSET_USERNAME: ${{ secrets.VITE_SUPERSET_USERNAME }}
          VITE_SUPERSET_PASSWORD: ${{ secrets.VITE_SUPERSET_PASSWORD }}

      # - name: Run tests
      #   run: npm run test

  build-publish-ecr-dev:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/dev')
    needs: test-and-build
    environment: dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: control-plane-frontend

    permissions:
      id-token: write     # Required for OIDC
      contents: write

    steps:

      - name: Checkout repo
        uses: actions/checkout@v4

      - run: echo "Running because ref is main or tag dev*"

      # - name: Debug OIDC token
      #   run: |
      #     echo "== Dumping OIDC token =="
      #     TOKEN=$(curl -sLS "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com" \
      #       -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" | jq -r .value)

      #     echo "$TOKEN" | cut -d. -f2 | base64 -d 2>/dev/null | jq .

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::558824711273:role/sparqd-github-actions-role
          aws-region: ap-southeast-1

      - name: Extract metadata
        id: meta
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL }}
          VITE_AIRFLOW_URL: ${{ vars.VITE_AIRFLOW_URL }}
          VITE_CONTROL_PLANE_API_BASE_URL: ${{ vars.VITE_CONTROL_PLANE_API_BASE_URL }}
          VITE_CONTROL_PLANE_API_BASE_URL_ONBOARDING: ${{ vars.VITE_CONTROL_PLANE_API_BASE_URL_ONBOARDING }}
          VITE_NEW_API: ${{ vars.VITE_NEW_API }}
          VITE_KEYCLOAK_URL: ${{ vars.VITE_KEYCLOAK_URL }}
          VITE_KEYCLOAK_REALM: ${{ vars.VITE_KEYCLOAK_REALM }}
          VITE_KEYCLOAK_CLIENT_ID: ${{ vars.VITE_KEYCLOAK_CLIENT_ID }}
          VITE_KEYCLOAK_CLIENT_SECRET: ${{ secrets.VITE_KEYCLOAK_CLIENT_SECRET }}
          VITE_AUTH_USERNAME: ${{ vars.VITE_AUTH_USERNAME }}
          VITE_AUTH_PASSWORD: ${{ vars.VITE_AUTH_PASSWORD }}
          VITE_SUPERSET_URL: ${{ vars.VITE_SUPERSET_URL }}
          VITE_SUPERSET_NODE_URL: ${{ vars.VITE_SUPERSET_NODE_URL }}
          VITE_JUPYTER_API_URL: ${{ vars.VITE_JUPYTER_API_URL }}
          VITE_SUPERSET_USERNAME: ${{ secrets.VITE_SUPERSET_USERNAME }}
          VITE_SUPERSET_PASSWORD: ${{ secrets.VITE_SUPERSET_PASSWORD }}
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.SHORT_SHA }}
          docker build \
            --build-arg VITE_API_URL=${{ vars.VITE_API_URL }} \
            --build-arg VITE_AIRFLOW_URL=${{ vars.VITE_AIRFLOW_URL }} \
            --build-arg VITE_CONTROL_PLANE_API_BASE_URL=${{ vars.VITE_CONTROL_PLANE_API_BASE_URL }} \
            --build-arg VITE_CONTROL_PLANE_API_BASE_URL_ONBOARDING=${{ vars.VITE_CONTROL_PLANE_API_BASE_URL_ONBOARDING }} \
            --build-arg VITE_NEW_API=${{ vars.VITE_NEW_API }} \
            --build-arg VITE_KEYCLOAK_URL=${{ vars.VITE_KEYCLOAK_URL }} \
            --build-arg VITE_KEYCLOAK_REALM=${{ vars.VITE_KEYCLOAK_REALM }} \
            --build-arg VITE_KEYCLOAK_CLIENT_ID=${{ vars.VITE_KEYCLOAK_CLIENT_ID }} \
            --build-arg VITE_KEYCLOAK_CLIENT_SECRET=${{ secrets.VITE_KEYCLOAK_CLIENT_SECRET }} \
            --build-arg VITE_AUTH_USERNAME=${{ vars.VITE_AUTH_USERNAME }} \
            --build-arg VITE_AUTH_PASSWORD=${{ vars.VITE_AUTH_PASSWORD }} \
            --build-arg VITE_SUPERSET_URL=${{ vars.VITE_SUPERSET_URL }} \
            --build-arg VITE_SUPERSET_NODE_URL=${{ vars.VITE_SUPERSET_NODE_URL }} \
            --build-arg VITE_JUPYTER_API_URL=${{ vars.VITE_JUPYTER_API_URL }} \
            --build-arg VITE_SUPERSET_USERNAME=${{ secrets.VITE_SUPERSET_USERNAME }} \
            --build-arg VITE_SUPERSET_PASSWORD=${{ secrets.VITE_SUPERSET_PASSWORD }} \
            -t $IMAGE_URI .

      - name: Push Docker image to ECR
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.SHORT_SHA }}
          docker push $IMAGE_URI

  update-argocd-image-tag-dev:
    environment: dev
    needs: build-publish-ecr-dev
    runs-on: ubuntu-latest

    permissions:
      id-token: write     # Required for OIDC
      contents: write

    steps:
      - name: Extract metadata
        id: meta
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          echo "Running job using environment = dev"

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: sparqd
          repositories: sparqd-gitops-master

      - name: Clone Argo repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ARGO_REPO_URI }}
          token: ${{ steps.generate-token.outputs.token }}
          ref: ${{ env.ARGO_REPO_TARGET_REVISION }}

      - name: Update values.yaml in ArgoCD Repo
        run: |
          cd ${{ env.ARGO_REPO_PATH }}
          sed -i "s|tag:.*|tag: \"${{ steps.meta.outputs.SHORT_SHA }}\"|" infra/deployments/platform/control-plane/values-ui.yaml

      - name: Commit and push to staging branch
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          cd ${{ env.ARGO_REPO_PATH }}
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add infra/deployments/platform/control-plane/values-ui.yaml
          git commit -m "github-actions: Update image tag to ${{ steps.meta.outputs.SHORT_SHA }}"
          git push origin ${{ env.ARGO_REPO_TARGET_REVISION }}
